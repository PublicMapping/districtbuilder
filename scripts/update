#!/bin/bash

set -e

if [[ -n "${DB_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0")
Build container images, update dependencies, and run database migrations.
"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        if [[ -n "${CI}" ]]; then
            CONFIG_ARGS=( "-f" "docker-compose.yml" "-f" "docker-compose.ci.yml" )
        else
            CONFIG_ARGS=( "-f" "docker-compose.yml" )
        fi
        # Ensure cached node_modules directories exist on host before startup
        # Otherwise Docker will create them as root, which will cause file perm issues
        mkdir -p "$HOME/.cache/district-builder-node-modules${EXECUTOR_NUMBER:-}"


        # Ensure container images are current
        docker-compose "${CONFIG_ARGS[@]}" build --pull

        # Clean dist directory
        docker-compose "${CONFIG_ARGS[@]}" \
            run -u node --rm --no-deps server \
            run clean

        # Update frontend, Yarn dependencies and build static asset bundle
        # docker-compose "${CONFIG_ARGS[@]}" \
        #     run --rm --no-deps client \
        #     bash -c "yarn install && yarn compile && yarn build"

        # Update backend, Yarn dependencies and build server
        docker-compose "${CONFIG_ARGS[@]}" \
            run -u node --rm --no-deps --entrypoint "bash -c" server \
            "npm install && npm rebuild && npm run build:server"

        # Update manage, Yarn dependencies and build
        # docker-compose "${CONFIG_ARGS[@]}" \
        #     run --rm --no-deps manage \
        #     bash -c "yarn install && yarn build"

        # Bring up PostgreSQL and NestJS in a way that respects
        # configured service health checks.
        docker-compose "${CONFIG_ARGS[@]}" \
            up -d database server

        docker-compose "${CONFIG_ARGS[@]}" \
            run --rm server \
            run migration:run
    fi
fi
