#!/bin/bash

set -e

if [[ -n "${DB_DEBUG}" ]]; then
    set -x
fi

function usage() {
    echo -n \
        "Usage: $(basename "$0") COMMAND OPTION[S]
Execute Terraform subcommands with remote state management.
"
}

if [[ -n "${GIT_COMMIT}" ]]; then
    GIT_COMMIT="${GIT_COMMIT:0:7}"
elif [[ -n "${GITHUB_SHA}" ]]; then
    GIT_COMMIT="${GITHUB_SHA:0:7}"
    echo "On Github so using GITHUB_SHA"
else
    echo "Must manually specify the GIT_COMMIT you want to deploy "
    echo "Try git rev-parse --short HEAD if you are sure that commit already has an image"
    exit 1
fi

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        TERRAFORM_DIR="$(dirname "$0")/../deployment/terraform"
        echo
        echo "Attempting to deploy application version [${GIT_COMMIT}]..."
        echo "-----------------------------------------------------"
        echo
    fi

    if [[ -n "${DB_SETTINGS_BUCKET}" ]]; then
        pushd "${TERRAFORM_DIR}"

        aws s3 cp "s3://${DB_SETTINGS_BUCKET}/terraform/terraform.tfvars" "${DB_SETTINGS_BUCKET}.tfvars"

        case "${1}" in
        plan)
            # Clear stale modules & remote state, then re-initialize
            rm -rf .terraform terraform.tfstate*

            make -sC lambda-functions/alert_to_slack

            terraform init \
                -backend-config="bucket=${DB_SETTINGS_BUCKET}" \
                -backend-config="key=terraform/state"

            terraform plan \
                -var="image_tag=${GIT_COMMIT}" \
                -var-file="${DB_SETTINGS_BUCKET}.tfvars" \
                -out="${DB_SETTINGS_BUCKET}.tfplan"
            ;;
        apply)
            terraform apply "${DB_SETTINGS_BUCKET}.tfplan"

            # Notify Rollbar of the deploy when runnng CI (have access to access token)
            if [[ -n "${DB_ROLLBAR_ACCESS_TOKEN}" && -n "${DB_DEPLOYMENT_ENVIRONMENT}" ]]; then
                curl -s https://api.rollbar.com/api/1/deploy/ \
                    -F "access_token=${DB_ROLLBAR_ACCESS_TOKEN}" \
                    -F "environment=${DB_DEPLOYMENT_ENVIRONMENT}" \
                    -F "revision=${GIT_COMMIT}" \
                    -F "local_username=GitHub_Actions"
            fi
            ;;
        *)
            echo "ERROR: I don't have support for that Terraform subcommand!"
            exit 1
            ;;
        esac

        popd
    else
        echo "ERROR: No DB_SETTINGS_BUCKET variable defined."
        exit 1
    fi
fi
